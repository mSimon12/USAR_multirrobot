// Generated by gencpp from file pioneer2dx_controllers/motionResponse.msg
// DO NOT EDIT!


#ifndef PIONEER2DX_CONTROLLERS_MESSAGE_MOTIONRESPONSE_H
#define PIONEER2DX_CONTROLLERS_MESSAGE_MOTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pioneer2dx_controllers
{
template <class ContainerAllocator>
struct motionResponse_
{
  typedef motionResponse_<ContainerAllocator> Type;

  motionResponse_()
    : succeeded(false)  {
    }
  motionResponse_(const ContainerAllocator& _alloc)
    : succeeded(false)  {
  (void)_alloc;
    }



   typedef uint8_t _succeeded_type;
  _succeeded_type succeeded;





  typedef boost::shared_ptr< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct motionResponse_

typedef ::pioneer2dx_controllers::motionResponse_<std::allocator<void> > motionResponse;

typedef boost::shared_ptr< ::pioneer2dx_controllers::motionResponse > motionResponsePtr;
typedef boost::shared_ptr< ::pioneer2dx_controllers::motionResponse const> motionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator1> & lhs, const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.succeeded == rhs.succeeded;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator1> & lhs, const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pioneer2dx_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95e696a0d10686913abb262e0b4cbbcf";
  }

  static const char* value(const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95e696a0d1068691ULL;
  static const uint64_t static_value2 = 0x3abb262e0b4cbbcfULL;
};

template<class ContainerAllocator>
struct DataType< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pioneer2dx_controllers/motionResponse";
  }

  static const char* value(const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#Response message type\n"
"bool succeeded\n"
"\n"
"\n"
;
  }

  static const char* value(const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.succeeded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pioneer2dx_controllers::motionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pioneer2dx_controllers::motionResponse_<ContainerAllocator>& v)
  {
    s << indent << "succeeded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.succeeded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIONEER2DX_CONTROLLERS_MESSAGE_MOTIONRESPONSE_H
